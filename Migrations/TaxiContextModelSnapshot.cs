// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication2.db;

#nullable disable

namespace WebApplication2.Migrations
{
    [DbContext(typeof(TaxiContext))]
    partial class TaxiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDriver", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.HasKey("CarId", "DriverId");

                    b.HasIndex("DriverId");

                    b.ToTable("CarDriver");
                });

            modelBuilder.Entity("WebApplication2.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyType = "Sedan",
                            Brand = "Toyota",
                            Color = "Сірий",
                            IsAvailable = true,
                            LicensePlate = "AA1234BB",
                            Model = "Camry",
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            BodyType = "Sedan",
                            Brand = "Skoda",
                            Color = "Білий",
                            IsAvailable = true,
                            LicensePlate = "BB5678CC",
                            Model = "Octavia",
                            Year = 2021
                        },
                        new
                        {
                            Id = 3,
                            BodyType = "Sedan",
                            Brand = "Mercedes-Benz",
                            Color = "Чорний",
                            IsAvailable = true,
                            LicensePlate = "CC9012DD",
                            Model = "E-Class",
                            Year = 2022
                        },
                        new
                        {
                            Id = 4,
                            BodyType = "Minivan",
                            Brand = "Volkswagen",
                            Color = "Синій",
                            IsAvailable = true,
                            LicensePlate = "DD3456EE",
                            Model = "Multivan",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rating")
                        .HasPrecision(3, 2)
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Experience = 5,
                            LicenseNumber = "ВК123456",
                            Name = "Іван Петренко",
                            Phone = "+380671234567",
                            Rating = 4.8m
                        },
                        new
                        {
                            Id = 2,
                            Experience = 3,
                            LicenseNumber = "АС789012",
                            Name = "Олена Коваленко",
                            Phone = "+380502345678",
                            Rating = 4.9m
                        },
                        new
                        {
                            Id = 3,
                            Experience = 7,
                            LicenseNumber = "НМ345678",
                            Name = "Андрій Шевченко",
                            Phone = "+380933456789",
                            Rating = 4.7m
                        });
                });

            modelBuilder.Entity("WebApplication2.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Distance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebApplication2.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerKm")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 40.00m,
                            CarType = "Sedan",
                            Description = "Стандартний автомобіль для щоденних поїздок",
                            Name = "Економ",
                            PricePerKm = 8.50m
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 60.00m,
                            CarType = "Business Sedan",
                            Description = "Комфортабельний автомобіль середнього класу",
                            Name = "Комфорт",
                            PricePerKm = 12.00m
                        },
                        new
                        {
                            Id = 3,
                            BasePrice = 100.00m,
                            CarType = "Premium",
                            Description = "Преміум автомобіль для ділових поїздок",
                            Name = "Бізнес",
                            PricePerKm = 18.00m
                        },
                        new
                        {
                            Id = 4,
                            BasePrice = 80.00m,
                            CarType = "Minivan",
                            Description = "Просторий автомобіль для великих компаній (до 7 осіб)",
                            Name = "Мінівен",
                            PricePerKm = 15.00m
                        });
                });

            modelBuilder.Entity("CarDriver", b =>
                {
                    b.HasOne("WebApplication2.Models.Car", null)
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication2.Models.Driver", null)
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication2.Models.Order", b =>
                {
                    b.HasOne("WebApplication2.Models.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("WebApplication2.Models.Service", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
